openapi: 3.0.3
info:
  title: Server API Retro
  description: This is the Retro's front/back API.
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    
paths:
  /user/signUp:
    post:
      summary: Creates a new Retro account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentialsDTO'
      responses:
        '200':
          description: Account successfully created
          content:
            application/json:
              schema:
                type: string
        '409':
          description: User already exists

  /user/signIn:
    post:
      summary: Logs in Retro application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogInDTO'
      responses:
        '200':
          description: Account successfully logged-in
          content:
            application/json:
              schema:
                type: string
        '409':
          description: User already logged-in
        '401':
          description: Wrong username or password

  /user/signOut:
    post:
      summary: Logs out Retro application
      responses:
        '200':
          description: Account successfully logged-out
          content:
            application/json:
              schema:
                type: string

  /user/delete/{username}:
    delete:
      summary: Deletes a Retro account
      parameters:
        - name: username
          in: path
          description: Account's username to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Account successfully deleted
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Account to delete not found

  /user/changePassword:
    post:
      summary: Changes logged-in user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
      responses:
        '200':
          description: Password successfully changed
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Wrong old password, password change failed
          content:
            application/json:
              schema:
                type: string
  
  /user/users:
    get:
      summary: Retrieves all Retro's users
      responses: 
        '200':
          description: Provides a list with all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPublicDTO'

  /item/items:
    get:
      summary: Retrieves all items on Retro
      responses:
        '200':
          description: Provides a list with all items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDTO'

  /item/itemsForSale:
    get:
      summary: Retrieves all items for sale on Retro
      responses:
        '200':
          description: Provides a list with all items for sale
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDTO'

  /item/sortBy/{categoryString}:
    get:
      summary: Retrieves all items corresponding to a given category
      parameters:
        - name: categoryString
          in: path
          description: String of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Provides a list with all the items from the given category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDTO'

  /item/get/{id}:
    get:
      summary: Retrieves one specific item with its id
      parameters:
        - name: id
          in: path
          description: Item's id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Provides the item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDTO'
        '404':
          description: Item not found in the database

  /item/newItem:
    post:
      summary: Adds a new item for sale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemDTO'
      responses:
        '200':
          description: Item added for sale
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Error while creating the new item
          content:
            application/json:
              schema:
                type: string

  /item/soldItem/{id}:
    patch:
      summary: Changes item from available to not available (item sold)
      parameters:
        - name: id
          in: path
          description: Item's id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Item successfully updated
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Item not found in the database
          content:
            application/json:
              schema:
                type: string

  /item/updateItem:
    patch:
      summary: Updates an item for sale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemDTO'
      responses:
        '200':
          description: Item successfully updated
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Item not found in the database
          content:
            application/json:
              schema:
                type: string

  /item/deleteItem/{id}:
    delete:
      summary: Deletes one specific item with its id
      parameters:
        - name: id
          in: path
          description: Item's id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Item successfully deleted
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Item not found in the database
          content:
            application/json:
              schema:
                type: string
  
  /item/uploadImages/{id}:
    post:
      summary: Uploads images to a specific item
      parameters:
        - name: id
          in: path
          description: Item's id
          required: true
          schema:
            type: string
            format: uuid
        - name: files
          in: query
          description: Files to upload
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Images successfully uploaded
          content:
            application/json:
              schema:
                type: string

components:
  schemas:
    UserCredentialsDTO:
      type: object
      properties: 
        username:
          type: string
          description: User's name
          example: lvhoa
        password:
          type: string
          description: User's password
          example: badPassword&
        email:
          type: string
          description: User's email
          example: lvhoa@gmail.com
        phoneNumber:
          type: string
          description: User's phone number
          example: +33643220143
        address:
          type: string
          description: User's address
          example: 20 avenue des buttes de coÃ«smes, 35700 Rennes
        profilePicturePath:
          type: string
          description: User's profile picture path
          example: C:/retro/images/image_56.jpeg
        description:
          type: string
          description: User's description
          example: I love to sell the clothes that I don't use anymore.
      required:
        - username
        - password
        - email
        - phoneNumber
        - address

    UserLogInDTO:
      type: object
      properties:
        username:
          type: string
          description: User's name
          example: lvhoa
        password:
          type: string
          description: User's password
          example: badPassword&
      required:
        - username
        - password

    UserPublicDTO:
      type: object
      properties:
        username:
          type: string
          description: User's name
          example: lvhoa
        profilePicturePath:
          type: string
          description: User's profile picture path
          example: C:/retro/images/image_56.jpeg
        description:
          type: string
          description: User's description
          example: I love to sell the clothes that I don't use anymore.
      required:
        - username

    PasswordChangeRequest:
      type: object
      properties:
        oldPassword:
          type: string
          description: User's old password
          example: badPassword&
        newPassword:
          type: string
          description: User's new password
          example: goodPassword&&
      required:
        - oldPassword
        - newPassword
          
    ItemDTO:
      type: object
      properties: 
        id:
          type: string
          format: uuid
          description: Item's id
          example: 667bdc23-3de4-482f-a0f4-3391452a7742
        name:
          type: string
          description: Item's name
          example: Brown fur jacket
        description:
          type: string
          description: Item's description
          example: The jacket was worn only once, it is in perfect condition
        sellerUsername:
          type: string
          description: Item's seller
          example: lvhoa
        price:
          type: number
          description: Item's price
          example: 35.15
        available:
          type: boolean
          description: Item's availability (sold or not)
          example: true
        women:
          type: boolean
          description: Item sold for women or not
          example: true
        men:
          type: boolean
          description: Item sold for men or not
          example: true
        brand:
          $ref: '#/components/schemas/BrandEnum'
        category:
          $ref: '#/components/schemas/CategoryEnum'
        colors:
          type: array
          items:
            $ref: '#/components/schemas/ColorEnum'
        condition:
          $ref: '#/components/schemas/ConditionEnum'
        size:
          $ref: '#/components/schemas/SizeEnum'
        imagePaths:
          type: array
          items:
            type: string

    BrandEnum:
      type: string
      enum:
        - ADIDAS
        - NIKE
        - DR_MARTENS
        - MURE_GRAND
        - WEEKDAY
        - COS
        - VON_DUTCH
        - LEVIS

    CategoryEnum:
      type: string
      enum:
        - DRESSES
        - JUMPERS_SWEATERS
        - TOPS_TSHIRTS
        - TROUSERS
        - LEGGINGS
        - JUMPSUITS
        - NIGHTWEAR
        - LINGERIE
        - ACTIVEWEAR
        - OUTWEAR
        - SUITS_BLAZERS
        - SKIRTS
        - JEANS
        - SHORTS
        - SWIMWEAR
        - MATERNITY
        - COSTUMES

    ColorEnum:
      type: string
      enum:
        - BLACK
        - WHITE
        - BLUE
        - GREY
        - BEIGE
        - MULTI
        - NAVY
        - BROWN
        - CREAM
        - LIGHT_BLUE
        - RED
        - ROSE
        - GREEN
        - PINK
        - KHAKI
        - BURGUNDY
        - DARK_GREEN
        - PURPLE
        - ORANGE
        - TURQUOISE
        - YELLOW
        - LILAC
        - CORAL
        - MUSTARD
        - MINT
        - GOLD
        - SILVER
        - APRICOT

    ConditionEnum:
      type: string
      enum:
        - NEW_WITH_TAGS
        - NEW_WITHOUT_TAGS
        - VERY_GOOD
        - GOOD
        - SATISFACTORY

    SizeEnum:
      type: string
      enum:
        - XXXS
        - XXS
        - XS
        - S
        - M
        - L
        - XL
        - XXL
        - XXXL